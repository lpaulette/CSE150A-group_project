import pandas as pd
import numpy as np

def load_data(file_path):
    """Load stock data from a CSV file."""
    return pd.read_csv(file_path, parse_dates=['Date'], index_col='Date')

def calculate_indicators(data):
    """Calculate trend indicators, volatility measures, and price patterns."""
    data['10-day MA'] = data['Close'].rolling(window=10).mean()
    data['50-day MA'] = data['Close'].rolling(window=50).mean()
    data['RSI'] = 100 - (100 / (1 + data['Close'].pct_change().rolling(window=14).mean() /
                                data['Close'].pct_change().rolling(window=14).std()))
    data['Volatility'] = data['Close'].pct_change().rolling(window=20).std()
    data['ATR'] = (data['High'] - data['Low']).rolling(window=14).mean()
    return data

def calculate_price_movement(data):
    """Determine if the stock price will go up or down the next day."""
    data['Next Day Return'] = data['Close'].shift(-1) - data['Close']
    data['Uptrend'] = (data['Next Day Return'] > 0).astype(int)
    return data

def bayesian_update(data):
    """Apply Bayesian updating to estimate P(Price Increase | Data) using volume-weighted likelihoods."""
    total_days = len(data.dropna())
    up_days = data['Uptrend'].sum()
    down_days = total_days - up_days
    
    prior = up_days / total_days if total_days > 0 else 0.5  # Prior probability
    
    # Volume-weighted likelihood calculation
    avg_volume_up = data.loc[data['Uptrend'] == 1, 'Volume'].mean()
    avg_volume_down = data.loc[data['Uptrend'] == 0, 'Volume'].mean()
    total_avg_volume = data['Volume'].mean()
    
    likelihood_up = avg_volume_up / total_avg_volume if total_avg_volume > 0 else 0.5
    likelihood_down = avg_volume_down / total_avg_volume if total_avg_volume > 0 else 0.5
    
    # Normalizing constant P(Data)
    evidence = (likelihood_up * prior) + (likelihood_down * (1 - prior))
    
    # Posterior: P(Uptrend | Data)
    posterior = (likelihood_up * prior) / evidence if evidence > 0 else 0
    
    return posterior

def expected_utility(posterior, expected_profit, expected_loss, risk_threshold):
    """Calculate the expected utility for making a trade decision."""
    utility = (posterior * expected_profit) - ((1 - posterior) * expected_loss)
    return utility, utility > risk_threshold

def make_trade_decision(posterior, expected_profit, expected_loss, risk_threshold, threshold=0.7):
    """Make a trading decision based on the posterior probability and expected utility."""
    utility, trade_decision = expected_utility(posterior, expected_profit, expected_loss, risk_threshold)
    
    if posterior > threshold and trade_decision:
        return "BUY"
    elif posterior < (1 - threshold):
        return "SELL"
    else:
        return "HOLD"

if __name__ == "__main__":
    file_path = input("Enter the path to your stock data CSV file: ")
    expected_profit = float(input("Enter the expected profit percentage (e.g., 0.05 for 5%): "))
    expected_loss = float(input("Enter the expected loss percentage (e.g., 0.03 for 3%): "))
    risk_threshold = float(input("Enter the risk threshold for trading decision: "))
    
    stock_data = load_data(file_path)
    stock_data = calculate_indicators(stock_data)
    stock_data = calculate_price_movement(stock_data)
    
    posterior_prob = bayesian_update(stock_data)
    decision = make_trade_decision(posterior_prob, expected_profit, expected_loss, risk_threshold)
    
    print(f"Posterior Probability of Uptrend: {posterior_prob:.4f}")
    print(f"Trading Decision: {decision}")
